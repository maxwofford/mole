// Mock AI responses for local development and testing
// Prevents API costs and allows multiple agents to work simultaneously

const MOCK_RESPONSES = {
  // README Classification responses
  'templated readme': 'TEMPLATED: Generic boilerplate README with minimal project-specific content',
  'ai generated': 'AI_GENERATED: Content appears to be generated by AI tools',
  'specific readme': 'SPECIFIC: Project-specific documentation with detailed implementation details',
  
  // Live Demo Classification
  'demo working': 'DEMO_LINK: Functional web application with interactive features',
  'video demo': 'VIDEO_LINK: Video demonstration of application functionality',
  'broken demo': 'NOT_WORKING: Link returns 404 or connection timeout',
  
  // Reality Check
  'real project': 'REAL: Fully functional application with complete feature set',
  'demo only': 'DEMO: Proof of concept or prototype with limited functionality',
  'no task': 'NO_TASK: Unable to determine functionality from available information',
  
  // Video Justification
  'video justified': 'JUSTIFIED: Video clearly demonstrates all claimed features',
  'video inadequate': 'NOT_JUSTIFIED: Video lacks demonstration of core functionality',
  
  // Release Check
  'has release': 'HAS_RELEASE: Repository contains tagged releases and deployment artifacts',
  'no release': 'NO_RELEASE: No releases or deployment evidence found'
}

class MockAI {
  constructor() {
    this.callCount = 0
    this.responses = MOCK_RESPONSES
  }

  async generateContent(prompt) {
    this.callCount++
    console.log(`[MOCK AI] Call #${this.callCount}: ${prompt.substring(0, 50)}...`)
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 100))
    
    // Determine response based on prompt content
    const promptLower = prompt.toLowerCase()
    
    if (promptLower.includes('readme') && promptLower.includes('templated')) {
      return this.responses['templated readme']
    } else if (promptLower.includes('readme') && promptLower.includes('ai')) {
      return this.responses['ai generated'] 
    } else if (promptLower.includes('readme')) {
      return this.responses['specific readme']
    } else if (promptLower.includes('demo') && promptLower.includes('working')) {
      return this.responses['demo working']
    } else if (promptLower.includes('video')) {
      return this.responses['video demo']
    } else if (promptLower.includes('real')) {
      return this.responses['real project']
    } else if (promptLower.includes('release')) {
      return this.responses['has release']
    }
    
    // Default response
    return 'SPECIFIC: Mock AI response for development testing'
  }

  // Method to add custom responses for specific tests
  addResponse(key, response) {
    this.responses[key] = response
  }

  // Reset call counter
  reset() {
    this.callCount = 0
  }

  // Get usage stats
  getStats() {
    return {
      totalCalls: this.callCount,
      costSaved: this.callCount * 0.001 // Rough estimate of cost per call
    }
  }
}

export { MockAI, MOCK_RESPONSES }
